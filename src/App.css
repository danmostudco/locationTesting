.App {
  font-family: 'Open Sans', sans-serif;
  color: #0D2143;
  letter-spacing: 0.055em;
  line-height: 1.3em;
  box-sizing: border-box;
}

p {
  margin: 0px;
  font-size: 1em;
}

@keyframes App-logo-spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}


/* labeling items here */
h2 {
  font-size: 1.1em;
  font-weight: 600;
}

h2 > span {
font-size: 0.6em;
}

h3 {
  font-size: 0.75em;
  font-weight: 300;
  color: #838A91;
}

.label {
  color: #0060F2;
  font-size: 0.55em;
  font-weight: 400;
  margin-bottom: 0px;
  text-transform: uppercase;
}

.miniText {
  font-size: 0.7em;
}

/* spacing items here */
.panelContainer {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  flex-wrap: wrap;
}

.panelColumn {
  width: 49%;
}

.panelColumnFull {
  width: 100%;
  margin: auto;
}

.valuePair {
  margin-bottom: 0.8em;
}

/* button styles here */
.buttonHolder {
  margin: 0.75em 0 0.25em;
  display: flex;
  justify-content: center;
}

button {
  font-family: 'Open Sans', sans-serif;
  font-weight: 300;
  color: white;
  letter-spacing: 0.055em;
  text-transform: uppercase;
  font-size: 0.7em;
  border-radius: 4em;
  border: none;

  height: 3.2em;
  width: 16em;
  text-align: center;

  box-shadow: 0px 3px 5px 0px rgba(70, 97, 133, 0.21);
}

.error {
  background-color: #F54444;
}

.normal {
  background-color: #0060F2;
}


/* grid stuff here */
.Grid {
  padding: 0;
  margin: 0;
  list-style: none;
  
  display: flex;
  
  flex-flow: row wrap;
  justify-content: center;
  align-items: stretch;

  max-width: 900px;
  margin: auto;
  margin-top: 20px;
}

.Grid-cell {
  box-sizing: border-box;
  border: 1px solid #D8DDE3;
  border-radius: 7px;
  max-width: 70%;
  min-width: 300px;

  padding: 20px;
  margin: auto;
  margin-bottom: 30px;
  margin-top: 0px;

  box-shadow: 0px 4px 7px 8px rgba(216,221,227,0.1);
}

/* header stuff here */
.titleContainer {
  max-width: 900px;
  margin: auto;
}

.title {
  padding: 15px 20px 15px 20px;
  text-align: center;
  font-size: 1.5em;
}


@media only screen and (min-width: 870px) {
  .Grid-cell {
    margin-bottom: 0px;
    max-width: 45%;
  }

  .titleContainer {
    max-width: 900px;
    margin: auto;
  }
  
  .title {
    margin-left: 20px;
    padding: 0px 20px 0px 20px;
    text-align: left;
  }
}


/* loader items here */
.spinner {
  margin: 61px auto;
  width: 50px;
  height: 40px;
  text-align: center;
  font-size: 10px;
  filter: blur(2px)
}

.spinner > div {
  background-color: #0060F2;
  height: 100%;
  width: 6px;
  display: inline-block;

  -webkit-animation: sk-stretchdelay 1.2s infinite ease-in-out;
  animation: sk-stretchdelay 1.2s infinite ease-in-out;
}

.spinner .rect2 {
  -webkit-animation-delay: -1.1s;
  animation-delay: -1.1s;
}

.spinner .rect3 {
  -webkit-animation-delay: -1s;
  animation-delay: -1s;
}

.spinner .rect4 {
  -webkit-animation-delay: -0.9s;
  animation-delay: -0.9s;
}

.spinner .rect5 {
  -webkit-animation-delay: -0.8s;
  animation-delay: -0.8s;
}

@-webkit-keyframes sk-stretchdelay {
  0%,
  40%,
  100% {
    -webkit-transform: scaleY(0.4);
  }
  20% {
    -webkit-transform: scaleY(1);
  }
}

@keyframes sk-stretchdelay {
  0%,
  40%,
  100% {
    transform: scaleY(0.4);
    -webkit-transform: scaleY(0.4);
  }
  20% {
    transform: scaleY(1);
    -webkit-transform: scaleY(1);
  }
}


/* animation items here */
@keyframes fadeShift { from { opacity:0; transform: translateX(-4px) } to { opacity:1; transform: translateX(0px) } }
@keyframes popOut { from { opacity:0; transform: scale(0.9) } to { opacity:1; transform: scale(1) } }

.title {
  opacity: 0;
  animation: fadeShift cubic-bezier(0.645, 0.045, 0.355, 1) 1; /* call our keyframe named fadeIn, use animattion ease-in and repeat it only 1 time */
  animation-fill-mode: forwards; /* this makes sure that after animation is done we remain at the last keyframe value (opacity: 1)*/
  animation-duration: 500ms;
}

.Grid-cell:nth-child(1) {
  opacity: 0;
  animation: popOut cubic-bezier(0.645, 0.045, 0.355, 1) 1; /* call our keyframe named fadeIn, use animattion ease-in and repeat it only 1 time */
  animation-fill-mode: forwards; /* this makes sure that after animation is done we remain at the last keyframe value (opacity: 1)*/
  animation-duration: 500ms;
  animation-delay: 100ms;
}

.Grid-cell:nth-child(2) {
  opacity: 0;
  animation: popOut cubic-bezier(0.645, 0.045, 0.355, 1) 1; /* call our keyframe named fadeIn, use animattion ease-in and repeat it only 1 time */
  animation-fill-mode: forwards; /* this makes sure that after animation is done we remain at the last keyframe value (opacity: 1)*/
  animation-duration:500ms;
  animation-delay: 200ms;
}